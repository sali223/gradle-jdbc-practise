import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class CarController {

    private static final List<Car> carList = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        // Create a server on port 8080
        HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);

        // Define endpoints
        server.createContext("/cars", new GetCarsHandler());
        server.createContext("/cars/add", new AddCarHandler());

        // Start the server
        server.setExecutor(null); // Use default executor
        server.start();
        System.out.println("Server started on port 8080");
    }

    // Handler to get list of cars
    static class GetCarsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                String response = carList.stream()
                        .map(Car::toString)
                        .collect(Collectors.joining("<br>")); // HTML line breaks

                // Prepare response
                exchange.getResponseHeaders().add("Content-Type", "text/html");
                exchange.sendResponseHeaders(200, response.length());

                OutputStream os = exchange.getResponseBody();
                os.write(response.getBytes());
                os.close();
            } else {
                sendMethodNotAllowed(exchange);
            }
        }
    }

    // Handler to add a car
    static class AddCarHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("POST".equals(exchange.getRequestMethod())) {
                String requestBody = new String(exchange.getRequestBody().readAllBytes());
                String[] carData = requestBody.split(",");

                if (carData.length >= 2) {
                    String make = carData[0].trim();
                    String model = carData[1].trim();
                    Car newCar = new Car(make, model);
                    carList.add(newCar);

                    String response = "Car added: " + newCar;
                    sendResponse(exchange, response, 200);
                } else {
                    sendResponse(exchange, "Invalid car data", 400);
                }
            } else {
                sendMethodNotAllowed(exchange);
            }
        }
    }

    private static void sendMethodNotAllowed(HttpExchange exchange) throws IOException {
        String response = "Method not allowed";
        exchange.sendResponseHeaders(405, response.length());
        OutputStream os = exchange.getResponseBody();
        os.write(response.getBytes());
        os.close();
    }

    private static void sendResponse(HttpExchange exchange, String response, int statusCode) throws IOException {
        exchange.sendResponseHeaders(statusCode, response.length());
        OutputStream os = exchange.getResponseBody();
        os.write(response.getBytes());
        os.close();
    }

    // Simple Car class
    static class Car {
        private final String make;
        private final String model;

        public Car(String make, String model) {
            this.make = make;
            this.model = model;
        }

        @Override
        public String toString() {
            return "Make: " + make + ", Model: " + model;
        }
    }
}
